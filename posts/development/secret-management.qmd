---
title: "민감정보관리시스템 구축"
description: "개인정보보호 위해 HashiCorp Vault 구축"
author: "BenKorea"
date: "2025-06-18"
date-modified: last-modified
categories: [Vault]
---

## 민감정보관리시스템 선택
- HashCorp Vault 무료 오픈소스로 진행

## vault 설치
- 도커 컨테이너로 진행

### 디렉토리 생성
- 마운트에 필요한 디렉토리를 만들고 권한을 vault 컨테이너에게 부여

```{r vault-mkdir, eval=FALSE, filename="bash"}
sudo mkdir -p ~/projects/vault
```
```{r vault-mkdir-sub, eval=FALSE, filename="bash"}
sudo mkdir -p ~/projects/vault/config ~/projects/vault/file ~/projects/vault/tls ~/projects/vault/logs
sudo chown 100:100 ~/projects/vault/config ~/projects/vault/file ~/projects/vault/tls ~/projects/vault/logs
sudo chmod 700 ~/projects/vault/config ~/projects/vault/file ~/projects/vault/tls ~/projects/vault/logs

```
- 검증
```{r vault-mkdir-validation, eval=FALSE, filename="bash"}
sudo ls -ld ~/projects/vault ~/projects/vault/config ~/projects/vault/tls ~/projects/vault/file ~/projects/vault/logs
```

### config.hcl 작성

```{r, config-hcl, eval=FALSE, filename='config.hcl'}
## Vault 운영모드 기본 config.hcl 예시

# 1. HTTP(S) Listener 설정 (운영환경: 반드시 TLS 활성화)
listener "tcp" {
  address       = "0.0.0.0:8200"               # 모든 네트워크에서 수신
  tls_cert_file = "/vault/tls/vault.crt"       # 볼륨 마운트된 인증서
  tls_key_file  = "/vault/tls/vault.key"       # 볼륨 마운트된 키
  # tls_min_version = "tls12"                  # 필요시 최소 TLS 버전 강제
}

# 2. 스토리지 백엔드 설정 (단일 서버: file, 클러스터: raft 등)
storage "file" {
  path = "/vault/file"
}
# storage "raft" {
#   path    = "/vault/raft"
#   node_id = "vault-1"
# }
# (필요시 클러스터, Consul, DynamoDB 등도 지원)

# 3. UI 활성화
ui = true

# 4. API 접근제어 (예시)
# api_addr = "https://vault.myorg.com:8200"
# cluster_addr = "https://vault.myorg.com:8201"

# 5. 로그 등 고급 옵션 예시
# log_level = "info"

# 6. (옵션) Audit log
# audit {
#   file_path = "/vault/logs/audit.log"
# }
```

### 1회용 인증서만들기

```{r openssl-req, eval=FALSE, filename="bash"}
sudo openssl req \
  -x509 \
  -newkey rsa:2048 \
  -keyout projects/vault/tls/vault.key \
  -out projects/vault/tls/vault.crt \
  -days 14 \
  -nodes \
  -subj "/C=KR/ST=Seoul/L=Seoul/O=KIRAMS/OU=RPythonStudy/CN=localhost" \
  -addext "subjectAltName = DNS:localhost, IP:127.0.0.1, DNS:keycloak-server, DNS:openldap-server"
```
- 검증
```{r openssl-req-validation, eval=FALSE, filename="bash"}
sudo ls -l projects/vault/tls
```
```{r openssl-subject-SAN-validation, eval=FALSE, filename="bash"}
sudo openssl x509 -in projects/vault/tls/vault.crt -noout -text | grep -E 'Subject:|DNS:|IP Address'
```


### docker-compose.yml 작성

```{r docker-compose, eval=FALSE, filename="docker-compose.yml"}
services:
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    volumes:
      - ./config:/vault/config
      - ./file:/vault/file
      - ./tls:/vault/tls
    command: server -config=/vault/config/config.hcl
    restart: unless-stopped
```

### 포트확인

```{r port-check, eval=FALSE, filename="bash"}
sudo lsof -i :8200
```
```{r systemd-check, eval=FALSE, filename="bash"}
sudo systemctl status vault
```
```
sudo systemctl stop vault
```
```
sudo docker run --cap-add=IPC_LOCK -d --name=dev-vault hashicorp/vault
```
```
sudo docker exec -it dev-vault /bin/sh
export VAULT_ADDR='http://127.0.0.1:8200'
vault status
```

```
sudo docker stop dev-vault
```

```
sudo docker rm dev-vault
```

```
sudo docker run --cap-add=IPC_LOCK \
  -e 'VAULT_LOCAL_CONFIG={"storage": {"file": {"path": "/vault/file"}}, "listener": [{"tcp": { "address": "0.0.0.0:8200", "tls_disable": true}}], "default_lease_ttl": "168h", "max_lease_ttl": "720h", "ui": true}' \
  -p 8200:8200 hashicorp/vault server
```
- 여기까지는 정상작동




## Vault 정책/계정/목적 매트릭스 예시
- vault

| 정책명(policy)                | 계정명(entity/role)           | 목적/설명                                                         |
|-------------------------------|-------------------------------|--------------------------------------------------------------------|
| svc-nmdose-prod-policy        | svc-nmdose-prod               | nmdose 운영서비스가 운영 비밀/인증서를 읽기 위해 사용                |
| svc-pseudo_struct-prod-policy | svc-pseudo_struct-prod        | pseudo_struct 운영서비스가 운영 비밀/인증서를 읽기 위해 사용         |
| svc-openldap-prod-policy      | svc-openldap-prod             | OpenLDAP 운영서비스의 비밀/인증서 접근                              |
| svc-keycloak-prod-policy      | svc-keycloak-prod             | Keycloak 운영서비스의 비밀/인증서 접근                              |
| svc-db-prod-policy            | svc-db-prod                   | DB 접속 정보 등 운영환경 비밀 접근                                  |
| svc-kibana-prod-policy        | svc-kibana-prod               | Kibana(감사 시스템) 운영환경 비밀 접근                              |
| svc-dashboard-prod-policy     | svc-dashboard-prod            | 대시보드/통계 운영환경 비밀 접근                                   |
| svc-nmdose-dev-policy         | svc-nmdose-dev                | nmdose 개발환경 비밀/인증서 접근                                   |
| svc-pseudo_struct-dev-policy  | svc-pseudo_struct-dev         | pseudo_struct 개발환경 비밀/인증서 접근                            |
| svc-openldap-dev-policy       | svc-openldap-dev              | OpenLDAP 개발환경 비밀/인증서 접근                                 |
| svc-keycloak-dev-policy       | svc-keycloak-dev              | Keycloak 개발환경 비밀/인증서 접근                                 |
| svc-db-dev-policy             | svc-db-dev                    | DB 개발환경 비밀 접근                                              |
| svc-kibana-dev-policy         | svc-kibana-dev                | Kibana 개발환경 비밀 접근                                          |
| svc-dashboard-dev-policy      | svc-dashboard-dev             | 대시보드 개발환경 비밀 접근                                        |
| svc-nmdose-stg-policy         | svc-nmdose-stg                | nmdose 스테이징(테스트) 비밀/인증서 접근                          |
| svc-pseudo_struct-stg-policy  | svc-pseudo_struct-stg         | pseudo_struct 스테이징(테스트) 비밀/인증서 접근                    |
| svc-openldap-stg-policy       | svc-openldap-stg              | OpenLDAP 스테이징(테스트) 비밀/인증서 접근                         |
| svc-keycloak-stg-policy       | svc-keycloak-stg              | Keycloak 스테이징(테스트) 비밀/인증서 접근                         |
| svc-db-stg-policy             | svc-db-stg                    | DB 스테이징(테스트) 비밀 접근                                      |
| svc-kibana-stg-policy         | svc-kibana-stg                | Kibana 스테이징(테스트) 비밀 접근                                  |
| svc-dashboard-stg-policy      | svc-dashboard-stg             | 대시보드 스테이징(테스트) 비밀 접근                                |
| vault-admin-policy            | vault-admin                   | Vault 전체 관리, 정책/계정/시스템 설정                              |
| vault-audit-policy            | vault-audit                   | Vault 감사(audit) 로그 열람                                        |
| key-admin-policy              | key-admin                     | 전체 인증서/키 관리, PKI 엔진 전담                                 |
| pseudo-key-admin-policy       | pseudo-key-admin              | 가명화키(암복호화) 생성·관리, 로테이션 등                         |
| ldap-secret-admin-policy      | ldap-secret-admin             | OpenLDAP 비밀/인증서 생성·관리                                     |
| keycloak-secret-admin-policy  | keycloak-secret-admin         | Keycloak 비밀/인증서 생성·관리                                     |
| db-secret-admin-policy        | db-secret-admin               | DB 비밀/인증서 생성·관리                                          |


