---
title: "민감정보관리시스템 구축"
description: "개인정보보호 위해 HashiCorp Vault 구축"
author: "BenKorea"
date: "2025-06-18"
date-modified: last-modified
categories: [Vault]
---

## Vault 관리위원회

-   Vault는 unseal key가 있어 필요시 이를 이용해서 root 권한으로 접속이 가능하다.
-   다섯개로 이루어지 이 키들은 각각 다른 사람이 보관하는 것이 추천된다.
-   따라서 이를 vault 관리위원회라 하고 각자 1개씩의 unseal key를 보관하도록 상상하였다.
-   프린터를 하여 물리적인 금고에 보관하는 것을 최상위 보안방법이라 생각되지만 현실적인 타협도 고려된다.
-   위원회의 구성은 의무기록의 가명화에 대한 책임이 있는 사람들로 구성하는 것이 좋을 것 같다.
-   어차피 위원회가 만들어진다면 가명화정보관리위원회 또는 개인정보보호위원회라 칭하고 그 역할을 규정해도 좋을 것이다.

## 사용자계정 분류

-   프로젝트의 민감정보를 관리하기 위해 권한별 사용자 계정을 분류하였다.
-   즉 사람을 분류한 것이 아니라 계정을 분류한 것임.

### Vault 관리자계정

-   Vault 시스템의 최상위 관리자계정 개념이다.
-   계정이 따로 존재하지 않고 최초 설치시에 발급되는 root token을 사용하여 vault에 접속하면 root 권한을 가지게 된다.
-   초기설정 시 감사로그 (audit log)를 남길 수 있도록 해야 한다.
-   프로젝트에 종속적이지 않고 병원전체에 한명이면 된다.
-   필요한 vault 사용자계정을 생성한다.

### Vault 사용자계정

-   Vault 관리자에 의해 생성된 사용자계정
-   일단 크게 두가지 역할이 필요하다.
-   KeyCloak 인증서버에 주입해야 하는 HTTPS/TLS key/certicate를 생성/보관해야 한다.
-   가명화를 위한 key와 tweak를 보관해야 한다.

### 가명화 담당자

-   가명화담당자는 프로젝트와 독립적인 사람이 바람직하다.
-   가명화를 위한 key와 tweak를 조회할 권한이 있으며, 가명화/복호화/검증을 한 후 프로젝트로 가명화된 자료를 보내주는 역할을 한다.

### 프로젝트관리자

-   pseudo-struct 프로젝트의 총괄책임자이면서 프로젝트 설정을 관리한다.

## \### 프로젝트사용자

가 인증과정에 필요로 하는 로써 프로젝트를 위한 정책들은 생성하고vault root 권한을 가지지 않은 사용자

```         
- 사용자계정로, Vault 서버의 설정 및 관리 작업을 수행합니다.
```

### HashCorp Vault

이 프로젝트에서는 가명화를 위해 HashCorp Vault를 사용하며, 가명화(익명화)담당자가 HashCorp Vault를 사용하여 가명화 키를 관리한다고 가정하였다.

### 설치

운영체제별로... 여기서는 wsl2 ubuntu

#### 시스템 그룹으로 등록

``` bash
sudo groupadd --system vault
```

그룹목록을 확인

``` bash
getent group
```

#### 시스템사용자로 등록

``` bash
sudo useradd --system --home /etc/vault --shell /bin/false --gid vault vault
```

``` bash
getent passwd vault
```

#### 1. HashiCorp GPG 키 등록

``` bash
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
```

#### 2. HashiCorp 저장소 추가

``` bash
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
```

#### 3. 패키지 정보 갱신

``` bash
sudo apt update
```

#### 4. Vault 설치

``` bash
sudo apt install vault
```

#### 설치검증

``` bash
vault -v
```

cf) vault -version 명령은 실행되지 않으니 주의를 요한다.

#### 필수 디렉토리 권한설정

설정파일용

``` bash
sudo mkdir -p /etc/vault
```

데이터 스토리지용

``` bash
sudo mkdir -p /var/lib/vault
```

데이터 스토리지용

``` bash
sudo mkdir -p /var/log/vault
```

재귀적으로 권한설정

``` bash
sudo chown -R vault:vault /etc/vault /var/lib/vault /var/log/vault
```

``` bash
sudo chmod 700 /etc/vault /var/lib/vault
```

#### 설정파일 만들기

```{r, engine='bash', eval=FALSE, filename='vault.hcl'}
# /etc/vault/vault.hcl

# 1) 스토리지 백엔드
storage "file" {
  path = "/var/lib/vault"
}

# 2) 리스너 (TLS 적용 권장)
listener "tcp" {
  address     = "0.0.0.0:8200"
  tls_disable = 1            # 운영환경에서는 tls_disable = 0 과 cert/key 설정 사용
}

# 3) UI 활성화
ui = true

# 4) 감사로그 (선택)
audit "file" {
  file_path = "/var/log/vault/audit.log"
  log_raw   = true
}
```

설정파일에 대한 사용자 및 권한설정

``` bash
sudo chown vault:vault /etc/vault/vault.hcl
```

``` bash
sudo chmod 640 /etc/vault/vault.hcl
```

#### systemd

/etc/systemd/system/vault.service 를 다음과 같이 작성

``` bash
[Unit]
Description=HashiCorp Vault - Secret Management
After=network-online.target
Wants=network-online.target

[Service]
User=vault
Group=vault
ExecStart=/usr/bin/vault server -config=/etc/vault/vault.hcl
ExecReload=/bin/kill -HUP $MAINPID
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
```

사용자변경 및 권한설정

``` bash
sudo chown root:root /etc/systemd/system/vault.service
```

``` bash
sudo chmod 644 /etc/systemd/system/vault.service
```

#### 기동

``` bash
sudo systemctl daemon-reload
```

``` bash
sudo systemctl enable vault
```bash
sudo systemctl start vault 
```

``` bash
sudo systemctl status vault
```

### 최초설정

``` bash
sudo vault operator init
```

HTTPS와 HTTP 불일치를 해결을 위한 인자로 주어서 초기설정 시작

```         
 sudo vault operator init -address="http://127.0.0.1:8200"
```

키와 토큰을 잘 저장한 후

``` bash
vault operator unseal <UNSEAL_KEY>
```

Sealed: false로 바뀐 것을 확인한 후
