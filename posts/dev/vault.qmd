---
title: "민감정보관리시스템 구축"
description: "개인정보보호 위해 HashiCorp Vault 구축"
author: "BenKorea"
date: "2025-06-18"
date-modified: last-modified
categories: [Vault]
---

## TLS 인증서
HTTP 통신의 보안을 강화하기 위해서는 암호화된 통신(HTTPS/TLS)이 필요하다.
이를 위해 서버와 클라이언트는 TLS 인증서(공개키/개인키 쌍)를 사용한다.
이 프로젝트에서는 도커로 실행되는 Vault 서버가 인증서 발급을 담당한다.
하지만 Vault 서버가 자체적으로 인증서를 발급하기 전, 최초 1회 HTTPS 접속 시에는 인증서가 없으므로 openssl을 사용해 자체 서명 임시 인증서를 생성해 이용하도록 구현했다.

## vault 컨테이너 임시인증서 신뢰 등록

- 컨테이너 운영체제를 조사
```
sudo docker exec -it vault cat /etc/os-release
```
- Alpine Linux 컨테이너이므로 
```
sudo docker exec -it vault cp /vault/certs/vault.crt /etc/ssl/certs/vault.crt
sudo docker exec -it vault /bin/sh -c "cat /vault/certs/vault.crt >> /etc/ssl/certs/ca-certificates.crt"
```

## 초기화

```{r vault-initiation, eval=FALSE, filename="bash"}
sudo docker exec -it vault vault operator init
```

```
sudo docker exec -it vault vault operator unseal
```
이 때 안전보관된 key을 입력해서 키가 올바른지 확인해 두는 것이 필요


```
sudo docker exec -it vault vault login
```
- token _accessor도 안전보관

## PKI 설정

- 설치과정에 오류가 의심되면 pki disable 이후 다시 한다.
```
sudo docker exec -it vault vault secrets disable pki
```

### 자가서명 인증서 발급

#### pki 엔진 활성 및 설정

```
sudo docker exec -it vault vault secrets enable pki
```
```
sudo docker exec -it vault vault secrets tune -max-lease-ttl=8760h pki
```

#### root CA 발급

```
sudo docker exec -it vault vault write pki/root/generate/internal \
    common_name=my-website.com \
    ttl=8760h
```

#### Update the CRL location and issuing certificates

```
sudo docker exec -it vault vault write pki/config/urls \
    issuing_certificates="http://127.0.0.1:8200/v1/pki/ca" \
    crl_distribution_points="http://127.0.0.1:8200/v1/pki/crl"
```    

#### Configure a role 

```
sudo docker exec -it vault vault write pki/roles/example-dot-com \
    allowed_domains=my-website.com \
    allow_subdomains=true \
    max_ttl=72h
```

#### Generate a new credentia
```
sudo docker exec -it vault vault write -format=json pki/issue/example-dot-com \
  common_name=www.my-website.com > cert.json
```

#### jq 설치
```
sudo apt-get update
sudo apt-get install jq
```




- 개발PC에 정책파일  pki-issuer.hcl 생성

```
sudo nano docker/vault/config/pki-issuer.hcl
```
# 인증서 발급(role별), 사인(sign), cert 읽기, CRL/CA chain 읽기 권한
path "pki/issue/*" {
  capabilities = ["create", "update"]
}
path "pki/sign/*" {
  capabilities = ["create", "update"]
}
path "pki/cert/*" {
  capabilities = ["read"]
}
path "pki/crl/*" {
  capabilities = ["read"]
}
path "pki/ca" {
  capabilities = ["read"]
}

```

- 권한설정
```
sudo chown 100:100 ./docker/vault/config/pki-issuer.hcl
sudo chmod -R 750 ./docker/vault/config/pki-issuer.hcl
```

- 검증
```
sudo ls -ld ./docker/vault/config/pki-issuer.hcl
```

컨테이너로 복사하기
```
sudo docker cp ./docker/vault/config/pki-issuer.hcl vault:/vault/config/pki-issuer.hcl
```

- 정책 등록
```
sudo docker exec -it vault vault policy write pki-issuer /vault/config/pki-issuer.hcl
```

- 검증
```
sudo docker exec -it vault vault policy list
```

```
sudo docker exec -it vault vault policy read pki-issuer

```

### 토큰 발행

```
sudo docker exec -it vault vault token create -policy=pki-issuer -ttl=24h
```


Vault PKI Role(역할) 생성

```
sudo docker exec -it vault vault write pki/roles/web-server \
  allowed_domains="localhost, keycloak-server, openldap-server" \
  allow_subdomains=true \
  max_ttl="24h"   # (운영은 1년 등, 필요시 24h~12h로 테스트)

```

Root CA(issuer) 생성

```
sudo docker exec -it vault vault write pki/root/generate/internal     common_name=my-website.com     ttl=8760h
```

### 개발단계 인증서 통합 운영

- 새로운 Role을 정의하고
```
sudo docker exec -it vault vault write pki/roles/dev-multi-service \
  allowed_domains="vault keycloak openldap localhost" \
  allow_subdomains=true \
  max_ttl="168h"


```

- 궁금해서 role을 조회한다면
```
sudo docker exec -it vault vault list pki/roles
```

- 위 Role을 이용해서 통합 인증서 발급
```
sudo docker exec -it vault vault write -format=json pki/issue/dev-multi-service \
  common_name="vault" \
  alt_names="vault,keycloak,openldap,localhost,127.0.0.1" \
  ttl="72h"
```










### api를 이용한 컨테이너 vault 초기화

## Vault 정책/계정/목적 매트릭스 예시

-   vault

| 정책명(policy) | 계정명(entity/role) | 목적/설명 |
|-------------------|-------------------|----------------------------------|
| svc-nmdose-prod-policy | svc-nmdose-prod | nmdose 운영서비스가 운영 비밀/인증서를 읽기 위해 사용 |
| svc-pseudo_struct-prod-policy | svc-pseudo_struct-prod | pseudo_struct 운영서비스가 운영 비밀/인증서를 읽기 위해 사용 |
| svc-openldap-prod-policy | svc-openldap-prod | OpenLDAP 운영서비스의 비밀/인증서 접근 |
| svc-keycloak-prod-policy | svc-keycloak-prod | Keycloak 운영서비스의 비밀/인증서 접근 |
| svc-db-prod-policy | svc-db-prod | DB 접속 정보 등 운영환경 비밀 접근 |
| svc-kibana-prod-policy | svc-kibana-prod | Kibana(감사 시스템) 운영환경 비밀 접근 |
| svc-dashboard-prod-policy | svc-dashboard-prod | 대시보드/통계 운영환경 비밀 접근 |
| svc-nmdose-dev-policy | svc-nmdose-dev | nmdose 개발환경 비밀/인증서 접근 |
| svc-pseudo_struct-dev-policy | svc-pseudo_struct-dev | pseudo_struct 개발환경 비밀/인증서 접근 |
| svc-openldap-dev-policy | svc-openldap-dev | OpenLDAP 개발환경 비밀/인증서 접근 |
| svc-keycloak-dev-policy | svc-keycloak-dev | Keycloak 개발환경 비밀/인증서 접근 |
| svc-db-dev-policy | svc-db-dev | DB 개발환경 비밀 접근 |
| svc-kibana-dev-policy | svc-kibana-dev | Kibana 개발환경 비밀 접근 |
| svc-dashboard-dev-policy | svc-dashboard-dev | 대시보드 개발환경 비밀 접근 |
| svc-nmdose-stg-policy | svc-nmdose-stg | nmdose 스테이징(테스트) 비밀/인증서 접근 |
| svc-pseudo_struct-stg-policy | svc-pseudo_struct-stg | pseudo_struct 스테이징(테스트) 비밀/인증서 접근 |
| svc-openldap-stg-policy | svc-openldap-stg | OpenLDAP 스테이징(테스트) 비밀/인증서 접근 |
| svc-keycloak-stg-policy | svc-keycloak-stg | Keycloak 스테이징(테스트) 비밀/인증서 접근 |
| svc-db-stg-policy | svc-db-stg | DB 스테이징(테스트) 비밀 접근 |
| svc-kibana-stg-policy | svc-kibana-stg | Kibana 스테이징(테스트) 비밀 접근 |
| svc-dashboard-stg-policy | svc-dashboard-stg | 대시보드 스테이징(테스트) 비밀 접근 |
| vault-admin-policy | vault-admin | Vault 전체 관리, 정책/계정/시스템 설정 |
| vault-audit-policy | vault-audit | Vault 감사(audit) 로그 열람 |
| key-admin-policy | key-admin | 전체 인증서/키 관리, PKI 엔진 전담 |
| pseudo-key-admin-policy | pseudo-key-admin | 가명화키(암복호화) 생성·관리, 로테이션 등 |
| ldap-secret-admin-policy | ldap-secret-admin | OpenLDAP 비밀/인증서 생성·관리 |
| keycloak-secret-admin-policy | keycloak-secret-admin | Keycloak 비밀/인증서 생성·관리 |
| db-secret-admin-policy | db-secret-admin | DB 비밀/인증서 생성·관리 |