---
title: "민감정보관리시스템 구축"
description: "개인정보보호 위해 HashiCorp Vault 구축"
author: "BenKorea"
date: "2025-06-18"
date-modified: last-modified
categories: [Vault]
---

앞서에서 docker compose 등으로 vault container는 이미 구동되었다고 가정

## Vault container 초기 설정

### vault 컨테이너 임시인증서 신뢰 등록

-   컨테이너 운영체제를 조사

```         
sudo docker exec -it vault cat /etc/os-release
```

-   Alpine Linux 컨테이너이므로

```         
sudo docker exec -it vault cp /vault/certs/vault.crt /etc/ssl/certs/vault.crt
sudo docker exec -it vault /bin/sh -c "cat /vault/certs/vault.crt >> /etc/ssl/certs/ca-certificates.crt"
```

### Unseal & login

```{r vault-initiation, eval=FALSE, filename="bash"}
sudo docker exec -it vault vault operator init
```

```         
sudo docker exec -it vault vault operator unseal
```

이 때 안전보관된 key을 입력해서 키가 올바른지 확인해 두는 것이 필요

```         
sudo docker exec -it vault vault login
```

-   token \_accessor도 안전보관

## Vault 자가서명 인증서로 교체

HTTP 통신의 보안을 강화하기 위해서는 암호화된 통신(HTTPS/TLS)이 필요하다. 이를 위해 서버와 클라이언트는 TLS 인증서(공개키/개인키 쌍)를 사용한다. 이 프로젝트에서는 도커로 실행되는 Vault 서버가 인증서 발급을 담당한다. 하지만 Vault 서버가 자체적으로 인증서를 발급하기 전, 최초 1회 HTTPS 접속 시에는 인증서가 없으므로 openssl을 사용해 자체 서명 임시 인증서를 생성해 이용하도록 구현했다. 그래서 최초 접속했을 때 자가서명 인증서를 발급받아서 이를 vault 서버용으로 사용한다. 개발단계에서는 여러서버를 이 하나로 공통으로 사용할 예정이다.

### pki 엔진 활성 및 설정

```         
sudo docker exec -it vault vault secrets enable pki
```

```         
sudo docker exec -it vault vault secrets tune -max-lease-ttl=8760h pki
```

### root CA 발급

```         
sudo docker exec -it vault vault write pki/root/generate/internal \
    common_name=my-website.com \
    ttl=8760h
```

### Update the CRL location and issuing certificates

```         
sudo docker exec -it vault vault write pki/config/urls \
    issuing_certificates="http://127.0.0.1:8200/v1/pki/ca" \
    crl_distribution_points="http://127.0.0.1:8200/v1/pki/crl"
```

### Configure a role

```         
sudo docker exec vault vault write pki/roles/example-dot-com \
    allowed_domains="my-website.com,localhost" \
    allow_subdomains=true \
    allow_bare_domains=true \
    allow_ip_sans=true \
    allow_localhost=true \
    max_ttl="168h"
```

### Generate a new credentia

-   평시랑 달리 -it (인터렉티브 모드)을 사용하지 않으니 경고가 stdout에 포함되지 않음.

```         
sudo docker exec vault vault write -format=json pki/issue/example-dot-com \
    common_name=localhost \
    alt_names="localhost, elasticsearch, kibana, logstash, keycloak, vault, openldap" \
    ip_sans=127.0.0.1 \
    ttl=168h \
    > cert.json 2>/dev/null
```

### 인증서(leaf cert) 추출

```         
jq -r '.data.certificate' cert.json > vault.crt
```

#### 프라이빗 키 추출

```         
jq -r '.data.private_key' cert.json > vault.key
```

### CA(발급자 인증서, 체인) 추출

```         
jq -r '.data.issuing_ca' cert.json > ca.crt
```

### 전체 체인 추출(있는 경우, .data.ca_chain\[\])

```         
jq -r '.data.ca_chain[]' cert.json > chain.crt
```

### 마운트폴더로 복사하기

```         
sudo cp vault.crt vault.key ./docker/vault/certs/
```

### 권한설정

```         
sudo chown 100:100 ./docker/vault/certs/vault.key
```

bash 실행파일 권한변경

```         
sudo chmod +x scripts/vault/generate_vault_cert.sh
```

```{r vault-certs-validation, eval=FALSE, filename="bash"}
sudo openssl x509 -in docker/vault/certs/vault.crt -noout -text | grep -E 'Subject:|DNS:|IP Address'
```

### 컨테이너 재시작

```         
sudo docker compose restart vault
```

### HTTPS/TLS 검증

```         
curl -vk https://localhost:8200/v1/sys/health
```

```         
sudo docker exec vault cat /vault/certs/vault.crt > test.crt
```

```         
openssl x509 -in test.crt -noout -text | grep 'Issuer\|Subject'
```

## 가명화 암호화키 저장

secret 엔진활성화 점검

```         
sudo docker exec -it vault vault secrets list
```