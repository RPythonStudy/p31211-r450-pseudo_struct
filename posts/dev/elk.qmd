---
title: "중앙 로그관리 시스템"
description: "ELK Stack"
author: "BenKorea"
date: "2025-06-27"
date-modified: last-modified
categories: [ELK Stack]
---

## 도커 정보 파악

### 시간 일치

-   개발PC의 timezone을 확인하고

```{r tz-check, eval=FALSE, filename="bash"}
timedatectl
```

-   "컨테이너의 타임존 관리를 위해 호스트의 /etc/localtime 및 /usr/share/zoneinfo를 컨테이너 내부에 바인드 마운트(bind mount)하여 호스트와 동일한 타임존 환경을 보장한다."
-   환경변수에 TZ=Asia/Seoul 설정도 한다.

### 컨테이터 서비스 id 확인

-   컨테이너별 서비스 uid/gid를 확인해야 한다.

```{r id-check, eval=FALSE, filename="bash"}
sudo docker exec logstash id
```

logstash 1000:1000 kibana 1000:1000 elasticsearch 1000:1000

## docker 정리

```{r docker-rearragne, eval=FALSE, filename="bash"}
sudo docker container prune
```

## ELK Stack 설치

### 디렉토리 생성

```{r elk-rm, eval=FALSE, filename="bash"}
sudo rm -rf ~/projects/p31211-r450-pseudo_struct/docker
```

```{r containter-mkdir, eval=FALSE, filename="bash"}
# ELK
mkdir -p ./docker/elk/esdata
mkdir -p ./docker/elk/logstash/pipeline

# KeyCloak
mkdir -p ./docker/keycloak/data

# Vault
mkdir -p ./docker/vault/config
mkdir -p ./docker/vault/file
mkdir -p ./docker/vault/certs
mkdir -p ./docker/vault/logs

# OoenLDAP
mkdir -p ./docker/openldap/data
mkdir -p ./docker/openldap/config
```

```{r own-mod-change, eval=FALSE, filename="bash"}
# ELK
sudo chown -R 1000:1000 ./docker/elk
sudo chown -R 1000:1000 ./docker/elk/esdata
sudo chown -R 1000:1000 ./docker/elk/logstash
sudo chown -R 1000:1000 ./docker/elk/logstash/pipeline
sudo chmod -R 750 ./docker/elk
sudo chmod -R 750 ./docker/elk/esdata
sudo chmod -R 750 ./docker/elk/logstash
sudo chmod -R 750 ./docker/elk/logstash/pipeline

# Keycloak
sudo chown -R 1000:0 ./docker/keycloak
sudo chown -R 1000:0 ./docker/keycloak/data
sudo chmod -R 750 ./docker/keycloak
sudo chmod -R 750 ./docker/keycloak/data

# Vault
sudo chown -R 100:100 ./docker/vault
sudo chown -R 100:100 ./docker/vault/config
sudo chown -R 100:100 ./docker/vault/file
sudo chown -R 100:100 ./docker/vault/certs
sudo chown -R 100:100 ./docker/vault/logs

sudo chmod -R 750 ./docker/vault
sudo chmod -R 750 ./docker/vault/config
sudo chmod -R 750 ./docker/vault/file
sudo chmod -R 750 ./docker/vault/certs
sudo chmod -R 750 ./docker/vault/logs

# OpenLDAP
sudo chown -R 101:103 ./docker/openldap
sudo chown -R 101:103 ./docker/openldap/data
sudo chown -R 101:103 ./docker/openldap/config
sudo chmod -R 750 ./docker/openldap
sudo chmod -R 750 ./docker/openldap/data
sudo chmod -R 750 ./docker/openldap/config

```

-   검증

```{r own-mode-validation, eval=FALSE, filename="bash"}
# ELK 관련 폴더 권한/검증
sudo ls -ld ./docker/elk \
  ./docker/elk/esdata \
  ./docker/elk/logstash \
  ./docker/elk/logstash/pipeline

# Keycloak 폴더 권한/검증
sudo ls -ld ./docker/keycloak \
  ./docker/keycloak/data

# Vault 폴더 권한/검증
sudo ls -ld ./docker/vault \
  ./docker/vault/config \
  ./docker/vault/file \  
  ./docker/vault/certs \
  ./docker/vault/logs

# OpenLDAP 폴더 권한/검증
sudo ls -ld ./docker/openldap \
  ./docker/openldap/data \
  ./docker/openldap/config

```

### 1회용 인증서만들기

```{r openssl-req, eval=FALSE, filename="bash"}
sudo openssl req \
  -x509 \
  -newkey rsa:2048 \
  -keyout docker/vault/certs/vault.key \
  -out docker/vault/certs/vault.crt \
  -days 14 \
  -nodes \
  -subj "/C=KR/ST=Seoul/L=Seoul/O=KIRAMS/OU=RPythonStudy/CN=localhost" \
  -addext "subjectAltName = DNS:localhost, IP:127.0.0.1, DNS:keycloak-server, DNS:openldap-server"
```

-   컨테이너 내 vault가 사용할 수 있도록 권한설정

```{r chown-dir, eval=FALSE, filename="bash"}
sudo chown 100:100 ./docker/vault/certs/vault.key
```

-   검증

```{r openssl-req-validation, eval=FALSE, filename="bash"}
sudo ls -l docker/vault/certs
```


```{r openssl-subject-SAN-validation, eval=FALSE, filename="bash"}
sudo openssl x509 -in docker/vault/certs/vault.crt -noout -text | grep -E 'Subject:|DNS:|IP Address'
```

### docker-compose.yml 작성

```{r nano-yml, eval=FALSE, filename="bash"}
sudo nano ~/projects/p31211-r450-pseudo_struct/docker-compose.yml
```

```{r nano-yml-short, eval=FALSE, filename="bash"}
sudo nano docker-compose.yml
```

```{r docker-compose, eval=FALSE, filename="docker-compose.yml"}
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms${ES_MEM} -Xmx${ES_MEM}"   # .env file should define ES_MEM
      - discovery.type=single-node
      - TZ=Asia/Seoul
    mem_limit: ${ES_MEM_LIMIT:-1792m}  # 환경변수로 변경
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./docker/elk/esdata:/usr/share/elasticsearch/data
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    networks:
      - elknet

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    container_name: kibana
    environment:
      - TZ=Asia/Seoul
    mem_limit: ${KB_MEM_LIMIT}
    ports:
      - "5601:5601"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    networks:
      - elknet

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.2
    container_name: logstash
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - "LS_JAVA_OPTS=-Xms${LS_MEM} -Xmx${LS_MEM}"
      - TZ=Asia/Seoul
    mem_limit: ${LS_MEM_LIMIT}
    ports:
      - "5044:5044"
      - "5000:5000"
      - "9600:9600"
    volumes:
      - ./docker/elk/logstash/pipeline:/usr/share/logstash/pipeline
      - /var/log:/var/log:ro
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    networks:
      - elknet

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      - KC_HEAP=${KC_HEAP}
      - TZ=Asia/Seoul
    mem_limit: ${KC_MEM_LIMIT}
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - ./docker/keycloak/data:/opt/keycloak/data
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    networks:
      - backend

  vault:
    image: hashicorp/vault:latest
    container_name: vault
    cap_add:
      - IPC_LOCK
    mem_limit: ${VT_MEM_LIMIT}
    ports:
      - "8200:8200"
    environment:
      VAULT_LOCAL_CONFIG: |
        {
          "storage": {"file": {"path": "/vault/file"}},
          "listener": [
            {"tcp": { "address": "0.0.0.0:8200", "tls_cert_file": "/vault/certs/vault.crt", "tls_key_file": "/vault/certs/vault.key"}}
          ],
          "default_lease_ttl": "168h",
          "max_lease_ttl": "720h",
          "ui": true
        }
      VAULT_API_ADDR: "https://vault:8200"   # <--- 이 줄만 추가    
      TZ: Asia/Seoul
    volumes:      
      - ./docker/vault/file:/vault/file
      - ./docker/vault/certs:/vault/certs          
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    command: server      
    networks:
      - backend

  openldap:
    image: osixia/openldap:latest
    container_name: openldap
    mem_limit: ${LD_MEM_LIMIT}
    ports:
      - "389:389"
      - "636:636"
    environment:
      - TZ=Asia/Seoul
    volumes:
      - ./docker/openldap/data:/var/lib/ldap
      - ./docker/openldap/config:/etc/ldap/slapd.d
      - /etc/localtime:/etc/localtime:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
    networks:
      - backend

networks:
  elknet:
    driver: bridge
  backend:
    driver: bridge


```

-   검증

```{r api-addr-validation, eval=FALSE, filename="bash"}
docker exec -it vault env | grep VAULT_API_ADDR
```

### logstash 컨테이너 설정

-   위 설정에서는 lohstash 컨테이너가 구동되는 파이프라인이 없어 바로 종료된다.
-   개발 PC의 시스템로그를 파이프라인에 아래와 같이 추가한다.

```{r logstash-pipeline, eval=FALSE, filename="logstash.conf"}
input {
  beats {
    port => 5044
  }
  # 필요하다면 기존 file input도 함께 사용 가능
  # file {
  #   path => "/var/log/syslog"
  #   start_position => "beginning"
  #   sincedb_path => "/dev/null"
  # }
}

filter {
  grok {
    match => { "message" => "%{TIMESTAMP_ISO8601:log_time} %{HOSTNAME:hostname} %{WORD:process}\[%{NUMBER:pid}\]: %{GREEDYDATA:summary}" }
    tag_on_failure => [ "_grokparsefailure" ]
  }
  # log_time에서 'YYYY-MM-DD HH:MM:SS'만 추출 (공백 또는 T 기준 split)
  ruby {
    code => '
      if event.get("log_time")
        t = event.get("log_time").to_s
        # "2025-06-29T23:06:00.732869+09:00" or "2025-06-29 23:06:00.732869+09:00"
        d, tm = t.split(/[T ]/)
        if tm
          event.set("short_time", "#{d} #{tm[0..7]}")
        else
          event.set("short_time", t[0..18])
        end
      end
    '
  }
  json {
    source => "summary"
    target => "summary_json"
    skip_on_invalid_json => true
  }
  if [summary_json][message] {
    mutate {
      replace => { "summary" => "%{[summary_json][message]}" }
    }
  }
  mutate {
    remove_field => ["summary_json"]
    gsub => [
      "summary", "\b\d{8}\b", "******"
    ]
  }
}
output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]  # docker compose 내부면 서비스명, 외부면 IP:PORT
    index => "syslog-%{+YYYY.MM.dd}"
  }

  stdout {
    codec => line {
      format => "%{short_time} | %{process}[%{pid}] | %{summary}"
    }
  }
}

```

이 conf 파일과 그안에서 설정한 경로도 소유와 권한을 변경해야 한다.

```{r own-mod-change-logstash-conf, eval=FALSE, filename="bash"}

sudo chown -R 1000:1000 ./docker/elk/logstash/pipeline/logstash.conf
sudo chmod -R 750 ./docker/elk/logstash/pipeline/logstash.conf

#sudo chown 1000:1000 /var/log/syslog
#sudo chmod 750 /var/log/syslog

```

```{r own-mode-validation-logstash-conf, eval=FALSE, filename="bash"}
# ELK 관련 폴더 권한/검증
sudo ls -ld ./docker/elk/logstash/pipeline/logstash.conf \
             /var/log/syslog

```

그리고 /var/log 폴더도 마운트해야 한다.

```{r own-mod-change-logstash-conf, eval=FALSE, filename="bash"}

sudo chown -R 1000:1000 ./docker/elk/logstash/pipeline/logstash.conf
sudo chmod -R 750 ./docker/elk/logstash/pipeline/logstash.conf

```

## Filebeat 설치

```         
curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg

echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | \
  sudo tee /etc/apt/sources.list.d/elastic-8.x.list
```

```         
sudo apt-get update
```

```         
sudo apt-get install filebeat
```

```         
filebeat version
```

```         
sudo systemctl enable filebeat
sudo systemctl start filebeat
sudo systemctl status filebeat
```

```{r filebeat-config, eval=FALSE, filename="filebeat.yml"}

filebeat.inputs:
  - type: log
    enabled: true
    paths:
      - /var/log/syslog

# logstash output
output.logstash:
  hosts: ["localhost:5044"]   # 도커 네트워크라면 logstash, 외부라면 IP:PORT

```

```         
sudo chown -R 995:986 /etc/filebeat
sudo chmod 750 /etc/filebeat
sudo chmod 640 /etc/filebeat/filebeat.yml
```

-   검증

```         
ls -ld /etc/filebeat
ls -l /etc/filebeat/filebeat.yml
```

권한오류가 발생하여 root 로 복귀

```         
sudo chown root:root /etc/filebeat/filebeat.yml
sudo chmod 640 /etc/filebeat/filebeat.yml
```

검증

```         
sudo filebeat test config
```

```         
sudo filebeat test output
```

```         
sudo systemctl restart filebeat
sudo systemctl status filebeat
```

```         
echo "filebeat 실전 로그 테스트 $(date)" | sudo tee -a /var/log/syslog
```

-   검증 HTTP://localhost:5061 \`\`\`