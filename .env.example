# .env.example

# ┌─[로그 레벨]───────────────────────────────────────────────────────────
# 애플리케이션 전체 로그 출력 수준을 제어합니다.
# 사용 가능한 값:
#   DEBUG   — 개발 시 상세한 디버그 메시지 출력
#   INFO    — 일반 정보성 메시지 출력 (기본값)
#   WARN    — 경고 메시지 출력
#   ERROR   — 오류 메시지 출력
LOG_LEVEL=

# ┌─[컨테이너 서비스별 메모리 환경변수 예시]─────────────────────────────
# 본 예시는 docker-compose 환경변수용 샘플입니다.
# 각 항목의 단위: m(MB), g(GB) (Docker의 메모리 표기법 사용)
#
# ──────────────[노트북: RAM 8GB, WSL2 6 GB 할당]──────────────
# 테스트 완료된 설정입니다.
ES_MEM=1g               # Elasticsearch JVM Heap (권장: 전체 메모리의 50% 이하)
ES_MEM_LIMIT=1972m      # Elasticsearch 컨테이너 메모리 제한 (컨테이너 전체)
LS_MEM=384m             # Logstash JVM Heap
LS_MEM_LIMIT=640m       # Logstash 컨테이너 메모리 제한
KB_MEM_LIMIT=640m       # Kibana 컨테이너 메모리 제한
KC_HEAP=384m            # Keycloak JVM Heap (Heap 단위 일관성 권장)
KC_MEM_LIMIT=640m       # Keycloak 컨테이너 메모리 제한
VT_MEM_LIMIT=640m       # Vault 컨테이너 메모리 제한
LD_MEM_LIMIT=256m       # OpenLDAP 컨테이너 메모리 제한

# ──────────────[데스크탑: RAM 128GB]──────────────
# 데스크탑은 고성능 환경이므로 리소스 활용을 최대화하여 제안합니다.
# 아래 값들은 실제 데이터/트래픽 규모에 따라 가감하세요.

# Elasticsearch (JVM Heap 및 컨테이너 메모리 제한)
# - JVM Heap은 전체 RAM의 50% 초과 금지, 단, 32GB 이상은 Off-heap 영역 문제로 권장 안함.
# - 보통 8g~16g에서 시작, 대용량 클러스터는 30g 이내 권장.
ES_MEM=16g              # JVM Heap (클러스터라면 8~16g, 단일 인스턴스 16g 이하 권장)
ES_MEM_LIMIT=32g        # 컨테이너 메모리 제한 (Heap의 2배 수준, 32g)
LS_MEM=8g               # Logstash JVM Heap (파이프라인 많을 때 8~16g 권장)
LS_MEM_LIMIT=16g        # Logstash 컨테이너 메모리 제한
KB_MEM_LIMIT=8g         # Kibana 컨테이너 메모리 제한
KC_HEAP=4g              # Keycloak JVM Heap (유저 많거나 OIDC 연동 많을 때 4g)
KC_MEM_LIMIT=8g         # Keycloak 컨테이너 메모리 제한
VT_MEM_LIMIT=2g         # Vault 컨테이너 메모리 제한
LD_MEM_LIMIT=2g         # OpenLDAP 컨테이너 메모리 제한

# ──────────────────────────────────────────────────────────────
# 실제 적용 시, 해당 환경(노트북/데스크탑) 값만 남기고 .env 파일에 복사해서 사용
#
# 예시:
#   노트북: .env.notebook → .env로 복사
#   데스크탑: .env.desktop → .env로 복사
#
# * 모든 값은 필요에 따라 조정 가능. JVM Heap은 컨테이너 메모리 제한보다 작아야 함
